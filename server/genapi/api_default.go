/*
Async Output Service API

An API for real-time matching of asynchronous output generation with client consumption.  The service acts as a matching intermediary between applications generating outputs  asynchronously and clients waiting to receive specific outputs in real-time.  **Core Concept**: Stream-based matching using streamID to connect senders with receivers.  **Phase 1**: Real-time in-memory matching with long polling **Phase 2**: Persistent storage with replay capability

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type DefaultAPI interface {

	/*
		ReceiveOutput Receive output for a specific stream

		Clients use this endpoint to receive output for a specific streamID.
	Uses long polling - waits for matching output within the configured timeout period.
	Returns 424 if no output arrives within timeout.

	**Phase 1**: Receives real-time matched output
	**Phase 2**: Supports resumeToken for historical replay


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiReceiveOutputRequest
	*/
	ReceiveOutput(ctx context.Context) ApiReceiveOutputRequest

	// ReceiveOutputExecute executes the request
	//  @return ReceiveResponse
	ReceiveOutputExecute(r ApiReceiveOutputRequest) (*ReceiveResponse, *http.Response, error)

	/*
		SendOutput Send output to waiting clients

		Applications use this endpoint to send output to clients waiting for a specific streamID.
	Uses long polling - waits for matching clients within the configured timeout period.
	Returns 424 if no client is waiting within timeout.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiSendOutputRequest
	*/
	SendOutput(ctx context.Context) ApiSendOutputRequest

	// SendOutputExecute executes the request
	SendOutputExecute(r ApiSendOutputRequest) (*http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiReceiveOutputRequest struct {
	ctx            context.Context
	ApiService     DefaultAPI
	streamId       *string
	timeoutSeconds *int32
	readFromDB     *bool
	dbResumeToken  *string
}

// The stream identifier to receive output for
func (r ApiReceiveOutputRequest) StreamId(streamId string) ApiReceiveOutputRequest {
	r.streamId = &streamId
	return r
}

// Maximum time to wait for output (default is 30s)
func (r ApiReceiveOutputRequest) TimeoutSeconds(timeoutSeconds int32) ApiReceiveOutputRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Whether to read from the database. By default, this is false.
func (r ApiReceiveOutputRequest) ReadFromDB(readFromDB bool) ApiReceiveOutputRequest {
	r.readFromDB = &readFromDB
	return r
}

// Resume token for reading from specific position, only applicable when readFromDB is true. Can be empty which will read from the beginning.
func (r ApiReceiveOutputRequest) DbResumeToken(dbResumeToken string) ApiReceiveOutputRequest {
	r.dbResumeToken = &dbResumeToken
	return r
}

func (r ApiReceiveOutputRequest) Execute() (*ReceiveResponse, *http.Response, error) {
	return r.ApiService.ReceiveOutputExecute(r)
}

/*
ReceiveOutput Receive output for a specific stream

Clients use this endpoint to receive output for a specific streamID.
Uses long polling - waits for matching output within the configured timeout period.
Returns 424 if no output arrives within timeout.

**Phase 1**: Receives real-time matched output
**Phase 2**: Supports resumeToken for historical replay

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReceiveOutputRequest
*/
func (a *DefaultAPIService) ReceiveOutput(ctx context.Context) ApiReceiveOutputRequest {
	return ApiReceiveOutputRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReceiveResponse
func (a *DefaultAPIService) ReceiveOutputExecute(r ApiReceiveOutputRequest) (*ReceiveResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReceiveResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ReceiveOutput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/streams/receive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.streamId == nil {
		return localVarReturnValue, nil, reportError("streamId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "streamId", r.streamId, "form", "")
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "form", "")
	}
	if r.readFromDB != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "readFromDB", r.readFromDB, "form", "")
	}
	if r.dbResumeToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dbResumeToken", r.dbResumeToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendOutputRequest struct {
	ctx         context.Context
	ApiService  DefaultAPI
	sendRequest *SendRequest
}

func (r ApiSendOutputRequest) SendRequest(sendRequest SendRequest) ApiSendOutputRequest {
	r.sendRequest = &sendRequest
	return r
}

func (r ApiSendOutputRequest) Execute() (*http.Response, error) {
	return r.ApiService.SendOutputExecute(r)
}

/*
SendOutput Send output to waiting clients

Applications use this endpoint to send output to clients waiting for a specific streamID.
Uses long polling - waits for matching clients within the configured timeout period.
Returns 424 if no client is waiting within timeout.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSendOutputRequest
*/
func (a *DefaultAPIService) SendOutput(ctx context.Context) ApiSendOutputRequest {
	return ApiSendOutputRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) SendOutputExecute(r ApiSendOutputRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SendOutput")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/streams/send"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sendRequest == nil {
		return nil, reportError("sendRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sendRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
