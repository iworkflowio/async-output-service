openapi: 3.0.0
info:
  title: Async Output Service API
  description: |
    An API for real-time matching of asynchronous output generation with client consumption.
    
    The service acts as a matching intermediary between applications generating outputs 
    asynchronously and clients waiting to receive specific outputs in real-time.
    
    **Core Concept**: Stream-based matching using streamID to connect senders with receivers.
    
    **Phase 1**: Real-time in-memory matching with long polling
    **Phase 2**: Persistent storage with replay capability
  version: "1.0.0"
  contact:
    name: Async Output Service Team


paths:
  /api/v1/streams/send:
    post:
      summary: Send output to waiting clients 
      description: |
        Applications use this endpoint to send output to clients waiting for a specific streamID.
        Uses long polling - waits for matching clients within the configured timeout period.
        Returns 424 if no client is waiting within timeout.
      operationId: sendOutput
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendRequest'
            examples:
                inMemoryOutput:
                 summary: Send output
                 value:
                   outputUuid: "123e4567-e89b-12d3-a456-426614174000"
                   streamId: "ai-agent-123"
                   output: {"message": "Processing step 1 completed", "step": 1}
                   inMemoryStreamSize: 1000
                dbOutput:
                  summary: Send output to database
                  value:
                    outputUuid: "123e4567-e89b-12d3-a456-426614174000"
                    streamId: "ai-agent-123"
                    output: {"message": "Processing step 1 completed", "step": 1}
                    writeToDB: true
                    dbTTLSeconds: 3600
      responses:
        '200':
          description: Output successfully delivered to waiting client
        '400':
          description: Bad Request - Invalid input parameters
        '500':
          description: Internal Server Error

  /api/v1/streams/receive:
    get:
      summary: Receive output for a specific stream
      description: |
        Clients use this endpoint to receive output for a specific streamID.
        Uses long polling - waits for matching output within the configured timeout period.
        Returns 424 if no output arrives within timeout.
        
        **Phase 1**: Receives real-time matched output
        **Phase 2**: Supports resumeToken for historical replay
      operationId: receiveOutput
      parameters:
        - name: streamId
          in: query
          required: true
          description: The stream identifier to receive output for
          schema:
            type: string
            example: "ai-agent-123"
        - name: timeoutSeconds
          in: query
          required: false
          description: Maximum time to wait for output (default is 30s)
          schema:
            type: integer
            example: 60
        - name: readFromDB
          in: query
          required: false
          description: Whether to read from the database. By default, this is false.
          schema:
            type: boolean
            example: true
        - name: dbResumeToken
          in: query
          required: false
          description: Resume token for reading from specific position, only applicable when readFromDB is true. Can be empty which will read from the beginning.
          schema:
            type: string
            example: "abc123def456"
      responses:
        '200':
          description: Output received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveResponse'
              examples:
                  inMemoryResponse:
                   summary: Real-time output
                   value:
                     outputUuid: "123e4567-e89b-12d3-a456-426614174000"
                     output: {"message": "Processing step 1 completed", "step": 1}
                     timestamp: "2024-01-01T10:00:00Z"
                  dbResponse:
                   summary: With resume token
                   value:
                     outputUuid: "123e4567-e89b-12d3-a456-426614174000"
                     output: {"status": "completed", "result": "success"}
                     timestamp: "2024-01-01T10:00:00Z"
                     dbResumeToken: "def456ghi789"
        '424':
          description: Failed Dependency - No output available (timeout exceeded)
        '400':
          description: Bad Request - Invalid parameters
        '500':
          description: Internal Server Error



components:
  schemas:
    SendRequest:
      type: object
      required:
        - outputUuid
        - output
        - streamId
      properties:
        outputUuid:
          type: string
          description: Unique identifier for the output
          example: "123e4567-e89b-12d3-a456-426614174000"
        streamId:
          type: string
          description: Unique identifier for the output stream
          example: "ai-agent-123"
        inMemoryStreamSize:
          type: integer
          description: The size of the in-memory stream. Only used when writeToDB is false. Default is 100. Will be used at the first request of send or receive of the stream. The stream will be a circular buffer unless using blockingWriteTimeoutSeconds. Circular buffer means the oldest output will be deleted when the stream is full. If using blockingWriteTimeoutSeconds, the stream will not delete the oldest output when the stream is full. In certain cases, setting this to zero, and using blockingWriteTimeoutSeconds, will make the stream behave like a sync match queue(no data loss but requires client to retry to wait for the stream to be available to write to).
          example: 100
        blockingWriteTimeoutSeconds:
          type: integer
          description: The timeout in seconds for waiting for the in-memory stream to be available to write to. Using this means the stream is not a circular buffer(not delete the oldest output when the stream is full). It will return 424 error if the stream is full after waiting. Using this with inMemoryStreamSize set to zero will make the stream behave like a sync match queue(no data loss but requires client to retry to wait for the stream to be available to write to).
          example: 30
        output:
          type: object
          description: The output data to send as JSON object
          example: {"message": "Processing step 1 completed", "step": 1}
        writeToDB:
          type: boolean
          description: Whether to write to the database. By default, this is false. 
        dbTTLSeconds:
          type: integer
          description: The TTL in seconds for the output in the database. Only used when writeToDB is true. Default is 24 * 60 * 60 (24 hours).

    ReceiveResponse:
      type: object
      required:
        - output
        - timestamp
      properties:
        outputUuid:
          type: string
          description: Unique identifier for the output
          example: "123e4567-e89b-12d3-a456-426614174000"
        output:
          type: object
          description: The received output data as JSON object
          example: {"message": "Processing step 1 completed", "step": 1}
        timestamp:
          type: string
          format: date-time
          description: When the output was generated
          example: "2024-01-01T10:00:00Z"
        dbResumeToken:
          type: string
          description: Token for resuming from next position, only applicable when writeToDB is true.
          example: "def456ghi789"



